* 與Ruby的第一次接觸

* 方便的物件

** 陣列

陣列(Array)是用來「將多個物件集合在一起的物件」中最基本而且最常使用的東西,稱為「陣列物件」或「Array物件」。

*** 建立陣列

要製作新的陣列，可以使用逗號分隔元素，並以「[]」框住所有資料。
首先下面是一個簡單的字串陣列範例：

#+begin_src ruby
name = [ "小林", "林", "高野", "森岡"]
#+end_src

當陣列物件的的內容尚未決定時,可以只寫「[]」，這表示空的陣列物件。

#+begin_src ruby
name = []
#+end_src

要建立陣列的方式還有很多種，詳細會在「第11章 陣列(Array)類別』說明。

*** 從陣列取得物件

存放在陣列裡的物件，分別會被標上表示其位置的編號，稱為 *索引(index)* 。
使用這個索引，可以將物件存放在喜歡的位置，或是取得特定位置的物件。

要取得陣列特定位置的物件，可以寫：

  陣列名[索引]

例如有個名叫name的陣列定義如下時：

#+begin_src ruby
name = [ "小林", "林", "高野", "森岡"]
#+end_src

要取得陣列name最前面的元素「小林」這個字串時，就應該寫成：

#+begin_src ruby
name[0]
#+end_src

所以，執行下面這行程式：

#+begin_src ruby
print "最前面的名字是", name[0], "。\n"
#+end_src

會得到下面這樣的結果：

*最前面的名字是小林。*

同樣的，name[1]會是"林"，而name[2]會是"高野"。

#+begin_src ruby
name = [ "小林", "林", "高野", "森岡"]
p name[0]    => "小林"
p name[1]    => "林"
p name[2]    => "高野"
p name[3]    => "森岡"
#+end_src

#+begin_comment Note
陣列的索引是從0開始的，並不是1。所以寫a[1]，並不是代表a這個陣列最前面的元素，
而會傳回第2個元素。或許在習慣前會滿常搞錯的（不，就算習慣了還是容易搞錯）。
小心點吧！
#+end_comment

#+begin_comment MEMO
若p方法的輸出結果是亂碼，請參考p.15的「注意」。
#+end_comment

*** 將物件存進陣列裡

我們也可以把物件存放到已經存在的陣列裡。要將物件存放到陣列時，可以使用下面的敘述：

  陣列名[索引] = 想要存放的物件

那麽還是拿前面的name陣列為例。例如要把最前面存放的字串改成"野高"時，可以寫：

#+begin_src ruby
name[0] = "野高"
#+end_src

例如執行了下面的程式，name的第一個元素就會變成「野高」。

#+begin_src ruby
name = [ "小林", "林", "高野", "森岡"]
name[0] = "野高"
p name    => ["野高", "林", "高野", "森岡"]
#+end_src

若指定的索引位置在目前的陣列不存在，則陣列的大小會改變。Ruby語言的陣列會配合
需要自己彈性調大。

#+begin_src ruby
name = [ "小林", "林", "高野", "森岡"]
name[4] = "野高"
p name    => ["小林", "林", "高野", "森岡", "野高"]
#+end_src

*** 陣列的內容

陣列裡可以存放任何物件，例如下面的陣列是存放數值而不是字串。

#+begin_src ruby
nums = [ 3, 1, 4, 1, 5, 9, 2, 6, 5]
#+end_src

一個陣列裡，也可以混有不同類型的陣列：

#+begin_src ruby
mixed = [ 1, "歌", 2, "風", 3]
#+end_src

雖然這裡不把範例寫出來，像是「時刻」「檔案」這些物件，都可以是陣列的元素。

*** 陣列的大小

要取得陣列的大小，可以使用size方法。例如，要取得陣列array的大小，可以這樣寫：

#+begin_src ruby
array.size
#+end_src

那麽就使用size方法來查詢先前name陣列物件的大小吧。

#+begin_src ruby
name = [ "小林", "林", "高野", "森岡"]
p name.size  => 4
#+end_src

像這樣，陣列的大小會以數值傳回。

*** 逐項處理陣列內容

在「想要顯示陣列裡所有的值」，「對所有陣列裡的元素，符合某條件時呼叫xx方法;
不符合時呼叫yy方法處理之」等時候，就必須去處理陣列的所有元素。

Ruby提供了each方法做這種處理。each方法就是第1章曾經稍微提過的「迭代器」，
是Ruby特有的方法之一。

each方法用法如下:

    陣列.each { | 變數 |
       想要反覆執行的動作
    }

each後面緊接之「{}」所圍住的部份稱為 *區塊(block)* 。
區塊裡可以定義多個連續的動作。而each這種方法，又稱為 *伴隨區塊的方法* 。

而區塊前方有個「| 變數 |」的部份。each方法會在每一圈逐項取得陣列的元素值，
並將這個值指派給「| 變數 |」處指定的變數，反覆執行區塊裡的內容。

那麽就來實際使用看看吧。List 2.1 會將陣列name的每一個元素顯示出來。

#+begin_src ruby List 2.1 each_name.rb
name = [ "小林", "林", "高野", "森岡"]
name.each { |n|
  print n, "\n"
}
#+end_src

#+results:
$ ruby each_name.rb
小林
林
高野
森岡

|n| 處的變數n，在每一圈裡，裡面的值會依序被存入name的各項元素值（圖2.3）。

#+begin_comment 圖2.3 List 2.1的迴圈中變數n的變化情形
第1圈          第2圈        第3圈          第4圈
n = "小林" --> n = "林" --> n = "高野" --> n = "森岡"
#+end_comment

陣列除了each方法以外，還有其他各式各樣的迭代器。在處理陣列時，使用迭代器會非常方便。
詳細內容會在「11.7 陣列主要的方法」中說明。

#+begin_src ruby
#+end_src


** 雜湊（Hash）

*雜湊* 也是經常使用的容器之一。雜湊可以使用字串等資料為鍵(key)來儲存物件(圖2.4)。

    font_table = { "normal" => "+0", "small" => "-1", "big" => "+1"}

#+begin_comment Note
以往雜湊也經常被稱為「關聯陣列（associative array）」，但近年「雜湊（hash）」
這個名稱比較常見。由於Ruby語言將類別名稱也命名成Hash，所以本書統一使用雜湊一詞。
#+end_comment

*** 建立雜湊

建立雜湊的方法與建立陣列很像，不同的地方是建立陣列的時候用的是「[]」，而建立
雜湊時則應該用「{}」。另外，建立雜湊時，要使用「=>」符號定義用來取出物件的鍵
與該鍵取出的值。

#+begin_src ruby
font_table = { "normal" => "+0", "small" => "-1", "big" => "+1"}
#+end_src

*** 從雜湊取得物件

從雜湊取得物件的方法也跟從陣列裡取得物件很像。從雜湊裡取得物件的方法如下：

    雜湊名[鍵]

另外，要將物件存放到雜湊時，則寫成：

    雜湊名[鍵] = 想要存放的物件

與陣列不同的是，雜湊的鍵（key）可以是數值以外的物件。下面的範例就是以字串作為鍵。

#+begin_src ruby
font_table = { "normal" => "+0", "small" => "-1", "big" => "+1" }
p font_table["small"]        #=> "-1"
p font_table["normal"]       #=> "+0"
p font_table["big"]          #=> "+1"
font_table["verybig"] = "+2"
p font_table["verybig"]      #=> "+2"
#+end_src

要注意的是，雜湊沒有固定的順序，並不能「依存放時的順序取出資料」。請小心。

*** 逐項處理雜湊內容

使用each方法，可以逐項取出雜湊的鍵與值，處理整個雜湊的內容。
在陣列的時候，會依索引的順序取出元素，而雜湊則會取出「鍵」與「值」的配對。

雜湊的each語法如下：

    雜湊.each { |鍵的變數, 值的變數|
        想要反覆執行的動作
    }

那就趕快來玩玩看吧（List 2.2）。

#+begin_src ruby List 2.2 fontsize.rb
print "<html><title>font size list</title>"
print "<body>\n<p>\n"
font_table = { "normal" => "+0", "small" => "-1", "big" => "+1" }
font_table.each { | key, value |
    print '<font size="', value, '">', key, '</font><br>',"\n"
}
print "</p></body></html>\n"
#+end_src

#+results:
$ ruby fontsize.rb
<html><title>font size list</title><body>
<p>
<font size="+0">normal</font><br>
<font size="-1">small</font><br>
<font size="+1">big</font><br>
</p></body></html>

試著將這些資料輸出成檔案吧。

要將ruby指令執行程式的結果儲存到檔案裡，可以使用「重導(redirect)」功能。
執行程式的時候，在指令的後面加上「> 檔名」，則輸出會被存在檔案裡。

來試試看吧，請執行下面的指令。

#+begin_src bash 執行範例
$ ruby fontsize.rb > fontsize.html
#+end_src

這樣一來，就會建立一個「fontsize.html」檔案。使用瀏覽器開啟這個檔案，會得到圖2.5這樣的結果。
請注意每行文字會以不同大小顯示。


[[file:./2.5-fontsize.html.png]]
                               #+CAPTION: 2.5 fontsize.html

#+begin_comment pp方法
除了p方法之外，還有個用途相同的pp方法。pp是「pretty print」的縮寫，必須事先使用require方法讀入pp程式庫才能使用。
與p方法的差異，或許直接看執行結果會比較好懂。
#+end_comment

#+begin_src ruby p_and_pp.rb
require 'pp'
v = [{"key_00" => "「快樂學Ruby 第2版」",
      "key_01" => "「Ruby 食譜」",
      "key_02" => "「更快樂的Ruby」"}]
p v
pp v
#+end_src

執行結果如下所示：

#+result:
[{"key_00"=>"「快樂學Ruby 第2版」", "key_01"=>"「Ruby 食譜」", "key_02"=>"「更快樂的Ruby」"}]
[{"key_00"=>"「快樂學Ruby 第2版」",
  "key_01"=>"「Ruby 食譜」",
   "key_02"=>"「更快樂的Ruby」"}]

從範例能看出，p方法在輸出物件的內部詳細資訊時，並不會特別去考慮易讀性：而pp方法則會將物件的內部詳細資訊排成容易閱讀的形式去顯示出來，
所以會是pp的結果好閱讀很多。所以要觀察結構複雜的物件，或是很多層巢狀的物件時，可以使用pp方法，能更清楚地觀察物件內容。

** 常規表示式

*常規表示式(regular expression)* 是經常用來處理字串的東西之一。使用常規表示式，可以輕鬆地進行這些動作：
 - 比較字串是否相同（比對）
 - 使用字串模式來切割字串
常規表示式是AWK，Perl等算是Ruby前輩的指令稿語言所培育茁壯的功能。Ruby也承襲這個傳統，將常規表示式作為內建功能，讓使用者可以
輕易地使用常規表示式。字串處理算是Ruby得意的範疇，常規表示式可說是功不可沒。

#+begin_comment 譯註
又譯為正規表示式，正規是數學上的譯詞，為了避免引起「正規」一詞帶有「只有這樣才是對的」的感覺所造成的誤會，在這裡選用亦通用的「常規表示式」一詞。
#+end_comment

*** 樣式比對與常規表示式

「想要顯示包括OO字串的那幾行資料」，「想要取得OO與XX之間所寫的字串」等等，有時候我們會想要對特定的字串樣式進行處理。
檢查字串是否符合樣式(pattern)，稱為比對(matching)，而符合樣式時稱為「比對成功」（圖2.6）

而在這個時候，常規表示式就是用來在程式裡面表達字串的樣式。

建立常規表示式物件的語法如下：

    /樣式/

例如，要與「Ruby」這個字串比對成功的樣式，可以寫成：

#+begin_src ruby
/Ruby/
#+end_src

長得一模一樣。如果是單由英文字母跟數字所構成的樣式，「一模一樣」就沒有問題了。

要把常規表示式拿來比對字串時，要使用「=~」運算子，有點類似拿來比較物件是否相等的「＝＝」運算子。
拿常規表示式去比對字串時，寫成：

    /樣式/ =~ 想要比對的字串

當比對成功時，會傳回比對成功的位置。文字的位置與陣列一樣，是從0起算的，也就是說字串最前面的位置會傳回0，而比對失敗時則會傳回nil。

#+begin_src ruby
p /Ruby/ =~ "Ruby"         #=> 0
p /Ruby/ =~ "Diamond"      #=> nil
#+end_src

如同前面所說，使用單由英文字母跟數字所構成的樣式進行比對時，只要字串的任何位置含有這個樣式，就會比對成功。如果沒有包含樣式，則會比對失敗。

#+begin_src ruby
p /Ruby/ =~ "Yet Another Ruby Hacker"         #=> 12
p /Yet Another Ruby Hacker/ =~ "Ruby"         #=> nil
#+end_src

常規表示式右側的「/」後面如果加上一個「i」，則比對時就不會去區分大小寫。

#+begin_src ruby
p /Ruby/ =~ "ruby"         #=> nil
p /Ruby/ =~ "RUBY"         #=> nil
p /Ruby/i =~ "ruby"        #=> 0
p /Ruby/i =~ "RUBY"        #=> 0
p /Ruby/i =~ "rUbY"        #=> 0
#+end_src

除此之外，常規表示式還有很多變化。詳細用法會在「第14章 常規表示式(Regexp)類別」說明。

nil是什麽？

nil是一個特別的值，用來代表物件不存在。就像以常規表示式進行比對而任何位置都無法比對成功的時候，當方法無法傳回有意義的值時，就會傳回nil。
另外，像是對陣列或雜湊取資料時，指定了不存在的索引或鍵時，也會得到nil。

#+begin_src ruby
ary = [ 1, 2, 3]
p ary[10]     #=> nil
hash = { "a" => 1, "b" => 2 }
p hash["c"]   #=> nil
#+end_src

使用if敘述或while敘述進行條件判斷時，false與nil會被視為「假」值，而其他所有的值都會被視為「真」。也就是說，除了傳回true或false的方法以外，
可能傳回「某些值」與「nil」的方法，也可以拿來作為條件。

下面的範例中，只輸出包含「林」字的字串
#+begin_src ruby Lis print_hayasi.rb
names = [ "小林", "林", "高野", "森岡" ]
names.each { | name |
  if /林/ =~ name
    puts name
  end
}
#+end_src

#+result: 執行結果
$ ruby print_hayasi.rb
小林
林
